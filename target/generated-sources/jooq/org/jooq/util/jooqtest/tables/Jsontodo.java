/*
 * This file is generated by jOOQ.
*/
package org.jooq.util.jooqtest.tables;


import com.google.gson.JsonElement;

import converters.PostgresJsonGsonBinding;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import org.jooq.util.jooqtest.Public;
import org.jooq.util.jooqtest.tables.records.JsontodoRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Jsontodo extends TableImpl<JsontodoRecord> {

    private static final long serialVersionUID = -995991044;

    /**
     * The reference instance of <code>public.jsontodo</code>
     */
    public static final Jsontodo JSONTODO = new Jsontodo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JsontodoRecord> getRecordType() {
        return JsontodoRecord.class;
    }

    /**
     * The column <code>public.jsontodo.id</code>.
     */
    public final TableField<JsontodoRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.jsontodo.datajson</code>.
     */
    public final TableField<JsontodoRecord, JsonElement> DATAJSON = createField("datajson", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), this, "", new PostgresJsonGsonBinding());

    /**
     * Create a <code>public.jsontodo</code> table reference
     */
    public Jsontodo() {
        this("jsontodo", null);
    }

    /**
     * Create an aliased <code>public.jsontodo</code> table reference
     */
    public Jsontodo(String alias) {
        this(alias, JSONTODO);
    }

    private Jsontodo(String alias, Table<JsontodoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Jsontodo(String alias, Table<JsontodoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Jsontodo as(String alias) {
        return new Jsontodo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Jsontodo rename(String name) {
        return new Jsontodo(name, null);
    }
}
